import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useAppContext } from '../../contexts/AppContext';
import { 
  FiUserCheck, 
  FiUserX, 
  FiCalendar, 
  FiFilter,
  FiDownload,
  FiEdit3,
  FiClock,
  FiUsers
} from 'react-icons/fi';

const AttendanceTracking: React.FC = () => {
  const { user, students, schedules, attendances, markAttendance } = useAppContext();
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);
  const [selectedSchedule, setSelectedSchedule] = useState('');

  // Find students assigned to this coach
  const myStudents = students.filter(s => s.coachId === user?.id);
  const mySchedules = schedules.filter(s => s.coachId === user?.id);

  // Get today's attendances
  const selectedDateAttendances = attendances.filter(a => 
    a.date.toDateString() === new Date(selectedDate).toDateString() &&
    myStudents.some(s => s.id === a.studentId)
  );

  const handleMarkAttendance = (studentId: string, present: boolean) => {
    // Check if attendance is already marked for this student on this date
    const existingAttendance = selectedDateAttendances.find(a => a.studentId === studentId);
    
    // If attendance is already marked, don't allow duplicate marking
    if (existingAttendance) {
      return;
    }
    
    markAttendance({
      studentId,
      scheduleId: selectedSchedule || 'schedule1',
      date: new Date(selectedDate),
      present,
      checkedBy: user?.id || '',
      notes: undefined
    });
  };

  const getAttendanceForStudent = (studentId: string) => {
    return selectedDateAttendances.find(a => a.studentId === studentId);
  };

  // Calculate attendance stats
  const totalStudents = myStudents.length;
  const presentToday = selectedDateAttendances.filter(a => a.present).length;
  const attendanceRate = totalStudents > 0 ? Math.round((presentToday / totalStudents) * 100) : 0;

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Control de Asistencia</h1>
          <p className="text-gray-600 mt-1">Marca la asistencia de tus estudiantes</p>
        </div>
        <div className="flex items-center gap-4">
          <button className="btn-secondary">
            <FiDownload className="w-4 h-4 mr-2" />
            Exportar
          </button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="card"
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Total Estudiantes</p>
              <p className="text-2xl font-bold text-gray-900">{totalStudents}</p>
            </div>
            <div className="p-3 rounded-full bg-blue-100">
              <FiUsers className="w-6 h-6 text-blue-600" />
            </div>
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="card"
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Presentes Hoy</p>
              <p className="text-2xl font-bold text-green-600">{presentToday}</p>
            </div>
            <div className="p-3 rounded-full bg-green-100">
              <FiUserCheck className="w-6 h-6 text-green-600" />
            </div>
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="card"
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Ausentes</p>
              <p className="text-2xl font-bold text-red-600">{totalStudents - presentToday}</p>
            </div>
            <div className="p-3 rounded-full bg-red-100">
              <FiUserX className="w-6 h-6 text-red-600" />
            </div>
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="card"
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Porcentaje</p>
              <p className="text-2xl font-bold text-primary-600">{attendanceRate}%</p>
            </div>
            <div className="p-3 rounded-full bg-primary-100">
              <FiClock className="w-6 h-6 text-primary-600" />
            </div>
          </div>
        </motion.div>
      </div>

      {/* Filters */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.4 }}
        className="card"
      >
        <div className="flex items-center gap-4 flex-wrap">
          <div className="flex items-center gap-2">
            <FiCalendar className="w-5 h-5 text-gray-400" />
            <label className="text-sm font-medium text-gray-700">Fecha:</label>
            <input
              type="date"
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
              className="input-field w-auto"
            />
          </div>
          
          <div className="flex items-center gap-2">
            <FiFilter className="w-5 h-5 text-gray-400" />
            <label className="text-sm font-medium text-gray-700">Horario:</label>
            <select
              value={selectedSchedule}
              onChange={(e) => setSelectedSchedule(e.target.value)}
              className="input-field w-auto"
            >
              <option value="">Todos los horarios</option>
              {mySchedules.map(schedule => (
                <option key={schedule.id} value={schedule.id}>
                  {schedule.day} {schedule.startTime} - {schedule.endTime}
                </option>
              ))}
            </select>
          </div>
        </div>
      </motion.div>

      {/* Attendance List */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.5 }}
        className="card"
      >
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-semibold text-gray-900">
            Lista de Asistencia - {new Date(selectedDate).toLocaleDateString('es-ES', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}
          </h3>
          <button className="btn-primary">
            <FiEdit3 className="w-4 h-4 mr-2" />
            Guardar Cambios
          </button>
        </div>

        <div className="space-y-3">
          {myStudents.map((student) => {
            const attendance = getAttendanceForStudent(student.id);
            const isPresent = attendance?.present;
            const isMarked = attendance !== undefined;

            return (
              <motion.div
                key={student.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.1 }}
                className="flex items-center gap-4 p-4 rounded-lg border border-gray-200 hover:bg-gray-50"
              >
                <img
                  src={student.avatar || 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=150'}
                  alt={student.name}
                  className="w-12 h-12 rounded-full object-cover"
                />
                
                <div className="flex-1">
                  <h4 className="font-medium text-gray-900">{student.name}</h4>
                  <p className="text-sm text-gray-500">
                    {student.category.name} • {student.age} años
                  </p>
                  <p className="text-xs text-gray-400">
                    Asistencia general: {student.stats.attendance}%
                  </p>
                </div>

                <div className="flex items-center gap-2">
                  <button
                    onClick={() => handleMarkAttendance(student.id, true)}
                    className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all ${
                      isPresent === true
                        ? 'bg-green-500 text-white'
                        : 'bg-green-100 text-green-700 hover:bg-green-200'
                    }`}
                  >
                    <FiUserCheck className="w-4 h-4" />
                    Presente
                  </button>
                  
                  <button
                    onClick={() => handleMarkAttendance(student.id, false)}
                    className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all ${
                      isPresent === false
                        ? 'bg-red-500 text-white'
                        : 'bg-red-100 text-red-700 hover:bg-red-200'
                    }`}
                  >
                    <FiUserX className="w-4 h-4" />
                    Ausente
                  </button>
                </div>

                {isMarked && (
                  <div className="flex items-center gap-1 text-xs text-gray-500">
                    <FiClock className="w-3 h-3" />
                    {attendance.date.toLocaleTimeString('es-ES', { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </div>
                )}
              </motion.div>
            );
          })}
        </div>

        {myStudents.length === 0 && (
          <div className="text-center py-12">
            <FiUsers className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">No hay estudiantes asignadas</h3>
            <p className="text-gray-500">Contacta al administrador para que te asigne estudiantes.</p>
          </div>
        )}
      </motion.div>

      {/* Quick Stats */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.6 }}
        className="grid grid-cols-1 md:grid-cols-3 gap-6"
      >
        <div className="card">
          <h4 className="font-medium text-gray-900 mb-3">Resumen Semanal</h4>
          <div className="space-y-2">
            <div className="flex justify-between text-sm">
              <span className="text-gray-600">Lunes:</span>
              <span className="font-medium">92%</span>
            </div>
            <div className="flex justify-between text-sm">
              <span className="text-gray-600">Miércoles:</span>
              <span className="font-medium">88%</span>
            </div>
            <div className="flex justify-between text-sm">
              <span className="text-gray-600">Viernes:</span>
              <span className="font-medium">94%</span>
            </div>
          </div>
        </div>

        <div className="card">
          <h4 className="font-medium text-gray-900 mb-3">Estudiantes Destacadas</h4>
          <div className="space-y-2">
            {myStudents
              .sort((a, b) => b.stats.attendance - a.stats.attendance)
              .slice(0, 3)
              .map((student, index) => (
                <div key={student.id} className="flex items-center gap-2 text-sm">
                  <span className={`w-5 h-5 rounded-full flex items-center justify-center text-xs font-bold ${
                    index === 0 ? 'bg-yellow-500 text-white' :
                    index === 1 ? 'bg-gray-400 text-white' :
                    'bg-orange-400 text-white'
                  }`}>
                    {index + 1}
                  </span>
                  <span className="flex-1 truncate">{student.name}</span>
                  <span className="font-medium">{student.stats.attendance}%</span>
                </div>
              ))}
          </div>
        </div>

        <div className="card">
          <h4 className="font-medium text-gray-900 mb-3">Acciones Rápidas</h4>
          <div className="space-y-2">
            <button className="w-full text-left text-sm text-blue-600 hover:text-blue-800">
              Marcar todas presentes
            </button>
            <button className="w-full text-left text-sm text-blue-600 hover:text-blue-800">
              Exportar asistencia
            </button>
            <button className="w-full text-left text-sm text-blue-600 hover:text-blue-800">
              Ver histórico
            </button>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

export default AttendanceTracking;